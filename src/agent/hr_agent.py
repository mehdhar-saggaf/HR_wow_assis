# src/agent/hr_agent.py
import os
import logging
from typing import Any

from langchain_groq import ChatGroq
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain.agents import create_tool_calling_agent, AgentExecutor

from src.agent.tools import build_tools

logger = logging.getLogger(__name__)

AGENT_SYSTEM = """ุฃูุช hr_agent.

ูููุชู ุงุฎุชูุงุฑ ุงูุฃุฏุงุฉ ุงูููุงุณุจุฉ ูุจู ุชูููุฏ ุงูุฅุฌุงุจุฉ:
- ุฅุฐุง ูุงู ุงูุณุคุงู ุนู ุณูุงุณุงุช ูุฅุฌุฑุงุกุงุช ุงูููุงุฑุฏ ุงูุจุดุฑูุฉ ุงูุฏุงุฎููุฉ โ ุงุณุชุฎุฏู ุฃุฏุงุฉ hr_search.
- ุฅุฐุง ูุงู ุงูุณุคุงู ุนู ุงุณุชุฎุฏุงู ููุตุฉ ุฌุณุฑ (ูุซู ุชุณุฌูู ุงูููุธูุ ุงูุฅุฌุงุฒุงุช ุนุจุฑ ุฌุณุฑุ ูุณูุฑ ุงูุฑูุงุชุจ ุฏุงุฎู ุฌุณุฑุ ุทุฑููุฉ ุฑูุน ุงูุทูุจุ ุงูุชููู ุฏุงุฎู ุงููุธุงู) โ ุงุณุชุฎุฏู ุฃุฏุงุฉ jisr_search.
- ุฅุฐุง ูุงู ุงูุณุคุงู ูุฌูุน ุจูู ุณูุงุณุฉ ุฏุงุฎููุฉ ูููููุฉ ุชูููุฐูุง ุนูู ุฌุณุฑ โ ุงุณุชุฏุนู ุงูุฃุฏุงุชูู ุจุงูุชุฑุชูุจ ุงูููุทูู (ุฃููุงู HR ุซู JISR ุบุงูุจุงู) ุซู ุงุฏูุฌ ุงููุชุงุฆุฌ.

ููุงุนุฏ ุตุงุฑูุฉ:
1) ูุฌุจ ุงุณุชุฏุนุงุก ุฃุฏุงุฉ ูุงุญุฏุฉ ุนูู ุงูุฃูู ูุจู ุงูุฅุฌุงุจุฉ. ูุง ุชูุชุจ ุฅุฌุงุจุฉ ุฏูู ูุชุงุฆุฌ ุฃุฏูุงุช.
2) ุงุนุชูุฏ ููุท ุนูู "context" ุงููุงุฏู ูู ุงูุฃุฏูุงุช. ูุง ุชูุฎูู ููุง ุชุถู ูุนูููุงุช ุฎุงุฑุฌ ุงููุตุงุฏุฑ.
3) ุฅุฐุง ูู ุชุฌุฏ ูุนูููุฉ ูุงููุฉ ูู ุงูุณูุงูุ ุตุฑูุญ ุจุฐูู ุจูุถูุญ ูุงูุชุฑุญ ุนูู ุงููุณุชุฎุฏู ุชุญุฏูุฏ ุณุคุงูู ุฃู ุฑูุน ููู ุงูุณูุงุณุฉ ุงูููุงุณุจ.
4) ุตูุบ ุงูุฅุฌุงุจุฉ ุจุงูุนุฑุจูุฉ ุจุดูู ููุฌุฒ ููุงุถุญ ูุนููู.
5) ุงุฎุชู ุจูุณู "ุงููุฑุงุฌุน" ูุฐูุฑ ุงุณู ุงููุณุชูุฏ + ุฑูู ุงูุฌุฒุก (chunk) ููู ูุตุฏุฑ ุงุณุชูุฏุช ุฅููู.
6) ูู ุงูุณุทุฑ ุงูุฃุฎูุฑุ ุถุน ุจููู JSON ุฏุงุฎู ุงููุณููู ุงูุชุงูููู ุญุฑูููุง:
<citations>{{"items":[...]}}</citations>
- "items" ูุฌุจ ุฃู ุชููู ูุตูููุฉ ุงูุฏูุฌ (ุจุฏูู ุชูุฑุงุฑ) ููู ุงูุนูุงุตุฑ ุงููุงุฏูุฉ ูู ุงูุฃุฏูุงุช ุจุงูุดูู:
  {{"doc_title": "string", "chunk": 0, "source": "string", "corpus": "hr"|"jisr"}}
- ูุง ุชุถู ููุงุชูุญ ุฃุฎุฑู ุบูุฑ ุงููุฐููุฑุฉ.
- ูุง ุชุบููุฑ ุฃุณูุงุก ุงูููุงุชูุญ.

ุฅุฑุดุงุฏุงุช ูุงุณุชุฎุฏุงู ูุชุงุฆุฌ ุงูุฃุฏูุงุช:
- ูู ุฃุฏุงุฉ ุชูุฑุฌุน ูุตูุง ุจุตูุบุฉ JSON ูุญูู:
  {{"context": "...", "citations": [{{...}}, ...]}}
- ุงูุฑุฃ ูุฐุง ุงูู JSONุ ุซู ุงุนุชูุฏ ุนูู "context" ุญุตุฑุงู ูุชุฃููู ุงูุฅุฌุงุจุฉ.
- ุงุฏูุฌ ุฌููุน "citations" ูู ุฌููุน ุงูุฃุฏูุงุช (ูุชุฎููุต ูู ุงูุชูุฑุงุฑุงุช) ูุถุนูุง ูู ุงูุจููู ุงูููุงุฆู ุฃุนูุงู.
"""

AGENT_HUMAN = "{input}"

def _build_llm() -> ChatGroq:
    """Build the Groq LLM client locked to openai/gpt-oss-120b."""
    api_key = os.getenv("GROQ_API_KEY", "")
    if not api_key:
        raise ValueError("GROQ_API_KEY is missing")

    model = "openai/gpt-oss-120b"   # ๐ fixed model
    try:
        temperature = float(os.getenv("GROQ_TEMPERATURE", "0.2"))
    except Exception:
        temperature = 0.2

    logger.info(f"Starting hr_agent with model: {model}, temperature={temperature}")
    return ChatGroq(model_name=model, temperature=temperature, groq_api_key=api_key)

def build_hr_agent(retriever: Any, settings: Any) -> AgentExecutor:
    """
    Build the tool-calling agent that can pick hr_search / jisr_search (or both),
    then compose a final Arabic answer with citations.
    """
    tools = build_tools(retriever, settings.DEFAULT_TOP_K)
    llm = _build_llm()

    prompt = ChatPromptTemplate.from_messages([
        ("system", AGENT_SYSTEM),
        MessagesPlaceholder("chat_history"),
        ("human", AGENT_HUMAN),
        MessagesPlaceholder("agent_scratchpad"),
    ])

    agent = create_tool_calling_agent(llm, tools, prompt)

    executor = AgentExecutor(
        agent=agent,
        tools=tools,
        verbose=True,
        handle_parsing_errors=True,
        max_iterations=4,
        early_stopping_method="force",   # โ FIXED (was "generate")
        return_intermediate_steps=False
    )
    return executor
